/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {ethers, EventFilter, Signer, BigNumber, BigNumberish, PopulatedTransaction} from 'ethers';
import {Contract, ContractTransaction, Overrides} from '@ethersproject/contracts';
import {BytesLike} from '@ethersproject/bytes';
import {Listener, Provider} from '@ethersproject/providers';
import {FunctionFragment, EventFragment, Result} from '@ethersproject/abi';

interface ExampleInterface extends ethers.utils.Interface {
  functions: {
    'collectData()': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'collectData', values?: void): string;

  decodeFunctionResult(functionFragment: 'collectData', data: BytesLike): Result;

  events: {};
}

export class Example extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ExampleInterface;

  functions: {
    collectData(overrides?: Overrides): Promise<ContractTransaction>;
  };

  collectData(overrides?: Overrides): Promise<ContractTransaction>;

  staticCall: {
    collectData(overrides?: Overrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    collectData(): Promise<BigNumber>;
  };

  populateTransaction: {
    collectData(): Promise<PopulatedTransaction>;
  };
}
