/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface StakedAaveInterface extends ethers.utils.Interface {
  functions: {
    "COOLDOWN_SECONDS()": FunctionFragment;
    "DISTRIBUTION_END()": FunctionFragment;
    "EMISSION_MANAGER()": FunctionFragment;
    "PRECISION()": FunctionFragment;
    "REVISION()": FunctionFragment;
    "REWARDS_VAULT()": FunctionFragment;
    "REWARD_TOKEN()": FunctionFragment;
    "STAKED_TOKEN()": FunctionFragment;
    "UNSTAKE_WINDOW()": FunctionFragment;
    "_aaveGovernance()": FunctionFragment;
    "_countsSnapshots(address)": FunctionFragment;
    "_snapshots(address,uint256)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "assets(address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "claimRewards(address,uint256)": FunctionFragment;
    "configureAssets(tuple[])": FunctionFragment;
    "cooldown()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "getNextCooldownTimestamp(uint256,uint256,address,uint256)": FunctionFragment;
    "getTotalRewardsBalance(address)": FunctionFragment;
    "getUserAssetData(address,address)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "initialize(address,string,string,uint8)": FunctionFragment;
    "name()": FunctionFragment;
    "redeem(address,uint256)": FunctionFragment;
    "stake(address,uint256)": FunctionFragment;
    "stakerRewardsToClaim(address)": FunctionFragment;
    "stakersCooldowns(address)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "COOLDOWN_SECONDS",
    values?: void
  ): string;
  encodeFunctionData(
    functionFragment: "DISTRIBUTION_END",
    values?: void
  ): string;
  encodeFunctionData(
    functionFragment: "EMISSION_MANAGER",
    values?: void
  ): string;
  encodeFunctionData(functionFragment: "PRECISION", values?: void): string;
  encodeFunctionData(functionFragment: "REVISION", values?: void): string;
  encodeFunctionData(functionFragment: "REWARDS_VAULT", values?: void): string;
  encodeFunctionData(functionFragment: "REWARD_TOKEN", values?: void): string;
  encodeFunctionData(functionFragment: "STAKED_TOKEN", values?: void): string;
  encodeFunctionData(functionFragment: "UNSTAKE_WINDOW", values?: void): string;
  encodeFunctionData(
    functionFragment: "_aaveGovernance",
    values?: void
  ): string;
  encodeFunctionData(
    functionFragment: "_countsSnapshots",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "_snapshots",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "assets", values: [string]): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "configureAssets",
    values: [
      {
        emissionPerSecond: BigNumberish;
        totalStaked: BigNumberish;
        underlyingAsset: string;
      }[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "cooldown", values?: void): string;
  encodeFunctionData(functionFragment: "decimals", values?: void): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextCooldownTimestamp",
    values: [BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalRewardsBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserAssetData",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: void): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakerRewardsToClaim",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakersCooldowns",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: void): string;
  encodeFunctionData(functionFragment: "totalSupply", values?: void): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "COOLDOWN_SECONDS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DISTRIBUTION_END",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EMISSION_MANAGER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "PRECISION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "REVISION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "REWARDS_VAULT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REWARD_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STAKED_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UNSTAKE_WINDOW",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_aaveGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_countsSnapshots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_snapshots", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "assets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configureAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cooldown", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextCooldownTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalRewardsBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserAssetData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakerRewardsToClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakersCooldowns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "AssetConfigUpdated(address,uint256)": EventFragment;
    "AssetIndexUpdated(address,uint256)": EventFragment;
    "Cooldown(address)": EventFragment;
    "Redeem(address,address,uint256)": EventFragment;
    "RewardsAccrued(address,uint256)": EventFragment;
    "RewardsClaimed(address,address,uint256)": EventFragment;
    "SnapshotDone(address,uint128,uint128)": EventFragment;
    "Staked(address,address,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "UserIndexUpdated(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetConfigUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetIndexUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Cooldown"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redeem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsAccrued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SnapshotDone"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserIndexUpdated"): EventFragment;
}

export class StakedAave extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: StakedAaveInterface;

  functions: {
    COOLDOWN_SECONDS(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    DISTRIBUTION_END(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    EMISSION_MANAGER(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    PRECISION(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    REVISION(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    REWARDS_VAULT(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    REWARD_TOKEN(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    STAKED_TOKEN(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    UNSTAKE_WINDOW(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    _aaveGovernance(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    _countsSnapshots(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    _snapshots(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      blockNumber: BigNumber;
      value: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    assets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      emissionPerSecond: BigNumber;
      lastUpdateTimestamp: BigNumber;
      index: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    claimRewards(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    configureAssets(
      assetsConfigInput: {
        emissionPerSecond: BigNumberish;
        totalStaked: BigNumberish;
        underlyingAsset: string;
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    cooldown(overrides?: Overrides): Promise<ContractTransaction>;

    decimals(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getNextCooldownTimestamp(
      fromCooldownTimestamp: BigNumberish,
      amountToReceive: BigNumberish,
      toAddress: string,
      toBalance: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getTotalRewardsBalance(
      staker: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getUserAssetData(
      user: string,
      asset: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initialize(
      aaveGovernance: string,
      name: string,
      symbol: string,
      decimals: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    name(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    redeem(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stake(
      onBehalfOf: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stakerRewardsToClaim(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    stakersCooldowns(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    symbol(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    totalSupply(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  COOLDOWN_SECONDS(overrides?: CallOverrides): Promise<BigNumber>;

  DISTRIBUTION_END(overrides?: CallOverrides): Promise<BigNumber>;

  EMISSION_MANAGER(overrides?: CallOverrides): Promise<string>;

  PRECISION(overrides?: CallOverrides): Promise<number>;

  REVISION(overrides?: CallOverrides): Promise<BigNumber>;

  REWARDS_VAULT(overrides?: CallOverrides): Promise<string>;

  REWARD_TOKEN(overrides?: CallOverrides): Promise<string>;

  STAKED_TOKEN(overrides?: CallOverrides): Promise<string>;

  UNSTAKE_WINDOW(overrides?: CallOverrides): Promise<BigNumber>;

  _aaveGovernance(overrides?: CallOverrides): Promise<string>;

  _countsSnapshots(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  _snapshots(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    blockNumber: BigNumber;
    value: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  assets(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    emissionPerSecond: BigNumber;
    lastUpdateTimestamp: BigNumber;
    index: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  claimRewards(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  configureAssets(
    assetsConfigInput: {
      emissionPerSecond: BigNumberish;
      totalStaked: BigNumberish;
      underlyingAsset: string;
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  cooldown(overrides?: Overrides): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getNextCooldownTimestamp(
    fromCooldownTimestamp: BigNumberish,
    amountToReceive: BigNumberish,
    toAddress: string,
    toBalance: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getTotalRewardsBalance(
    staker: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserAssetData(
    user: string,
    asset: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initialize(
    aaveGovernance: string,
    name: string,
    symbol: string,
    decimals: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  redeem(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stake(
    onBehalfOf: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stakerRewardsToClaim(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  stakersCooldowns(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  staticCall: {
    COOLDOWN_SECONDS(overrides?: CallOverrides): Promise<BigNumber>;

    DISTRIBUTION_END(overrides?: CallOverrides): Promise<BigNumber>;

    EMISSION_MANAGER(overrides?: CallOverrides): Promise<string>;

    PRECISION(overrides?: CallOverrides): Promise<number>;

    REVISION(overrides?: CallOverrides): Promise<BigNumber>;

    REWARDS_VAULT(overrides?: CallOverrides): Promise<string>;

    REWARD_TOKEN(overrides?: CallOverrides): Promise<string>;

    STAKED_TOKEN(overrides?: CallOverrides): Promise<string>;

    UNSTAKE_WINDOW(overrides?: CallOverrides): Promise<BigNumber>;

    _aaveGovernance(overrides?: CallOverrides): Promise<string>;

    _countsSnapshots(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _snapshots(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      blockNumber: BigNumber;
      value: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<boolean>;

    assets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      emissionPerSecond: BigNumber;
      lastUpdateTimestamp: BigNumber;
      index: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    claimRewards(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<void>;

    configureAssets(
      assetsConfigInput: {
        emissionPerSecond: BigNumberish;
        totalStaked: BigNumberish;
        underlyingAsset: string;
      }[],
      overrides?: Overrides
    ): Promise<void>;

    cooldown(overrides?: Overrides): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<boolean>;

    getNextCooldownTimestamp(
      fromCooldownTimestamp: BigNumberish,
      amountToReceive: BigNumberish,
      toAddress: string,
      toBalance: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getTotalRewardsBalance(
      staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserAssetData(
      user: string,
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<boolean>;

    initialize(
      aaveGovernance: string,
      name: string,
      symbol: string,
      decimals: BigNumberish,
      overrides?: Overrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    redeem(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<void>;

    stake(
      onBehalfOf: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<void>;

    stakerRewardsToClaim(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakersCooldowns(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<boolean>;
  };

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): EventFilter;

    AssetConfigUpdated(asset: string | null, emission: null): EventFilter;

    AssetIndexUpdated(asset: string | null, index: null): EventFilter;

    Cooldown(user: string | null): EventFilter;

    Redeem(from: string | null, to: string | null, amount: null): EventFilter;

    RewardsAccrued(user: null, amount: null): EventFilter;

    RewardsClaimed(
      from: string | null,
      to: string | null,
      amount: null
    ): EventFilter;

    SnapshotDone(owner: null, oldValue: null, newValue: null): EventFilter;

    Staked(
      from: string | null,
      onBehalfOf: string | null,
      amount: null
    ): EventFilter;

    Transfer(from: string | null, to: string | null, value: null): EventFilter;

    UserIndexUpdated(
      user: string | null,
      asset: string | null,
      index: null
    ): EventFilter;
  };

  estimateGas: {
    COOLDOWN_SECONDS(): Promise<BigNumber>;
    DISTRIBUTION_END(): Promise<BigNumber>;
    EMISSION_MANAGER(): Promise<BigNumber>;
    PRECISION(): Promise<BigNumber>;
    REVISION(): Promise<BigNumber>;
    REWARDS_VAULT(): Promise<BigNumber>;
    REWARD_TOKEN(): Promise<BigNumber>;
    STAKED_TOKEN(): Promise<BigNumber>;
    UNSTAKE_WINDOW(): Promise<BigNumber>;
    _aaveGovernance(): Promise<BigNumber>;
    _countsSnapshots(arg0: string): Promise<BigNumber>;
    _snapshots(arg0: string, arg1: BigNumberish): Promise<BigNumber>;
    allowance(owner: string, spender: string): Promise<BigNumber>;
    approve(spender: string, amount: BigNumberish): Promise<BigNumber>;
    assets(arg0: string): Promise<BigNumber>;
    balanceOf(account: string): Promise<BigNumber>;
    claimRewards(to: string, amount: BigNumberish): Promise<BigNumber>;
    configureAssets(
      assetsConfigInput: {
        emissionPerSecond: BigNumberish;
        totalStaked: BigNumberish;
        underlyingAsset: string;
      }[]
    ): Promise<BigNumber>;
    cooldown(): Promise<BigNumber>;
    decimals(): Promise<BigNumber>;
    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish
    ): Promise<BigNumber>;
    getNextCooldownTimestamp(
      fromCooldownTimestamp: BigNumberish,
      amountToReceive: BigNumberish,
      toAddress: string,
      toBalance: BigNumberish
    ): Promise<BigNumber>;
    getTotalRewardsBalance(staker: string): Promise<BigNumber>;
    getUserAssetData(user: string, asset: string): Promise<BigNumber>;
    increaseAllowance(
      spender: string,
      addedValue: BigNumberish
    ): Promise<BigNumber>;
    initialize(
      aaveGovernance: string,
      name: string,
      symbol: string,
      decimals: BigNumberish
    ): Promise<BigNumber>;
    name(): Promise<BigNumber>;
    redeem(to: string, amount: BigNumberish): Promise<BigNumber>;
    stake(onBehalfOf: string, amount: BigNumberish): Promise<BigNumber>;
    stakerRewardsToClaim(arg0: string): Promise<BigNumber>;
    stakersCooldowns(arg0: string): Promise<BigNumber>;
    symbol(): Promise<BigNumber>;
    totalSupply(): Promise<BigNumber>;
    transfer(recipient: string, amount: BigNumberish): Promise<BigNumber>;
    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    COOLDOWN_SECONDS(): Promise<PopulatedTransaction>;
    DISTRIBUTION_END(): Promise<PopulatedTransaction>;
    EMISSION_MANAGER(): Promise<PopulatedTransaction>;
    PRECISION(): Promise<PopulatedTransaction>;
    REVISION(): Promise<PopulatedTransaction>;
    REWARDS_VAULT(): Promise<PopulatedTransaction>;
    REWARD_TOKEN(): Promise<PopulatedTransaction>;
    STAKED_TOKEN(): Promise<PopulatedTransaction>;
    UNSTAKE_WINDOW(): Promise<PopulatedTransaction>;
    _aaveGovernance(): Promise<PopulatedTransaction>;
    _countsSnapshots(arg0: string): Promise<PopulatedTransaction>;
    _snapshots(arg0: string, arg1: BigNumberish): Promise<PopulatedTransaction>;
    allowance(owner: string, spender: string): Promise<PopulatedTransaction>;
    approve(
      spender: string,
      amount: BigNumberish
    ): Promise<PopulatedTransaction>;
    assets(arg0: string): Promise<PopulatedTransaction>;
    balanceOf(account: string): Promise<PopulatedTransaction>;
    claimRewards(
      to: string,
      amount: BigNumberish
    ): Promise<PopulatedTransaction>;
    configureAssets(
      assetsConfigInput: {
        emissionPerSecond: BigNumberish;
        totalStaked: BigNumberish;
        underlyingAsset: string;
      }[]
    ): Promise<PopulatedTransaction>;
    cooldown(): Promise<PopulatedTransaction>;
    decimals(): Promise<PopulatedTransaction>;
    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish
    ): Promise<PopulatedTransaction>;
    getNextCooldownTimestamp(
      fromCooldownTimestamp: BigNumberish,
      amountToReceive: BigNumberish,
      toAddress: string,
      toBalance: BigNumberish
    ): Promise<PopulatedTransaction>;
    getTotalRewardsBalance(staker: string): Promise<PopulatedTransaction>;
    getUserAssetData(
      user: string,
      asset: string
    ): Promise<PopulatedTransaction>;
    increaseAllowance(
      spender: string,
      addedValue: BigNumberish
    ): Promise<PopulatedTransaction>;
    initialize(
      aaveGovernance: string,
      name: string,
      symbol: string,
      decimals: BigNumberish
    ): Promise<PopulatedTransaction>;
    name(): Promise<PopulatedTransaction>;
    redeem(to: string, amount: BigNumberish): Promise<PopulatedTransaction>;
    stake(
      onBehalfOf: string,
      amount: BigNumberish
    ): Promise<PopulatedTransaction>;
    stakerRewardsToClaim(arg0: string): Promise<PopulatedTransaction>;
    stakersCooldowns(arg0: string): Promise<PopulatedTransaction>;
    symbol(): Promise<PopulatedTransaction>;
    totalSupply(): Promise<PopulatedTransaction>;
    transfer(
      recipient: string,
      amount: BigNumberish
    ): Promise<PopulatedTransaction>;
    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish
    ): Promise<PopulatedTransaction>;
  };
}
