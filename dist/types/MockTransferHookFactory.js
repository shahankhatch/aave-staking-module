"use strict";
/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockTransferHookFactory = void 0;
var contracts_1 = require("@ethersproject/contracts");
var MockTransferHookFactory = /** @class */ (function (_super) {
    __extends(MockTransferHookFactory, _super);
    function MockTransferHookFactory(signer) {
        return _super.call(this, _abi, _bytecode, signer) || this;
    }
    MockTransferHookFactory.prototype.deploy = function (overrides) {
        return _super.prototype.deploy.call(this, overrides || {});
    };
    MockTransferHookFactory.prototype.getDeployTransaction = function (overrides) {
        return _super.prototype.getDeployTransaction.call(this, overrides || {});
    };
    MockTransferHookFactory.prototype.attach = function (address) {
        return _super.prototype.attach.call(this, address);
    };
    MockTransferHookFactory.prototype.connect = function (signer) {
        return _super.prototype.connect.call(this, signer);
    };
    MockTransferHookFactory.connect = function (address, signerOrProvider) {
        return new contracts_1.Contract(address, _abi, signerOrProvider);
    };
    return MockTransferHookFactory;
}(contracts_1.ContractFactory));
exports.MockTransferHookFactory = MockTransferHookFactory;
var _abi = [
    {
        anonymous: false,
        inputs: [],
        name: "MockHookEvent",
        type: "event"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "from",
                type: "address"
            },
            {
                internalType: "address",
                name: "to",
                type: "address"
            },
            {
                internalType: "uint256",
                name: "amount",
                type: "uint256"
            }
        ],
        name: "onTransfer",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
    }
];
var _bytecode = "0x608060405234801561001057600080fd5b5060ff8061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80634a39314914602d575b600080fd5b609660048036036060811015604157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506098565b005b7f34250cbfa6d218c1d0a9b5950b60dac352f03d00642722e501cbc86d1ea8130160405160405180910390a150505056fea26469706673582212209c0d9c06aec7916c93915e633f025cf1ada455addfe0d224bc55906a24a658fd64736f6c634300060c0033";
//# sourceMappingURL=MockTransferHookFactory.js.map